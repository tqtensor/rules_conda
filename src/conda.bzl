load(":utils.bzl", "CONDA_EXT_MAP", "EXECUTE_TIMEOUT", "INSTALLER_SCRIPT_EXT_MAP", "execute_waitable_windows", "get_arch", "get_os", "windowsify")

# CONDA CONFIGURATION
CONDA_MAJOR = "3"
CONDA_MINOR = "py311_23.5.2-0"
CONDA_SHA = {
    "Windows": {
        "x86_64": "00e8370542836862d4c790aa8966f1d7344a8addd4b766004febcb23f40e2914",
    },
    "MacOSX": {
        "x86_64": "1622e7a0fa60a7d3d892c2d8153b54cd6ffe3e6b979d931320ba56bd52581d4b",
        "arm64": "c8f436dbde130f171d39dd7b4fca669c223f130ba7789b83959adc1611a35644",
    },
    "Linux": {
        "x86_64": "634d76df5e489c44ade4085552b97bebc786d49245ed1a830022b0b406de5817",
        "aarch64": "3962738cfac270ae4ff30da0e382aecf6b3305a12064b196457747b157749a7a",
        "ppc64le": "92237cb2a443dd15005ec004f2f744b14de02cd5513a00983c2f191eb43d1b29",
        "s390x": "221a4cd7f0a9275c3263efa07fa37385746de884f4306bb5d1fe5733ca770550",
    },
}
CONDA_INSTALLER_NAME_TEMPLATE = "Miniconda{major}-{minor}-{os}-{arch}{ext}"
CONDA_BASE_URL = "https://repo.anaconda.com/miniconda/"

MINIFORGE_MAJOR = "3"
MINIFORGE_MINOR = "23.1.0-4"
MINIFORGE_SHA = {
    "Windows": {
        "x86_64": "38f61fddd7e8ba021bc21c0caad03e0275cc64a0514483bf1cf4addb3ebe4326",
    },
    "MacOSX": {
        "x86_64": "a43f4e34aa27b5cb849027b01b03931df52f768fc8b82b1f72f40ff064abb6f3",
        "arm64": "de48052b85900a3878cedbb25add7e17b14d5bdfba8ba523791851a10a6b84fe",
    },
    "Linux": {
        "x86_64": "35c531207d2a8d212215bdb7f998c926f24bc8686e1cf46a693a3ea375613a7f",
        "aarch64": "bf6a4b9d3e0195b9c64b58f0e28738edc259a214f362edbc23884e82ad59cb8c",
        "ppc64le": "0e49480e6a3429d9578bdbdc154d623375273b3e8c205353c1cc9d6e0cce1f59",
    },
}

MINIFORGE_INSTALLER_NAME_TEMPLATE = "{minor}/Miniforge{major}-{minor}-{os}-{arch}{ext}"
MINIFORGE_BASE_URL = "https://github.com/conda-forge/miniforge/releases/download/"

INSTALLER_DIR = "installer"
INSTALLER_FLAGS = {
    "Windows": ["/InstallationType=JustMe", "/AddToPath=0", "/RegisterPython=0", "/S", "/D={}"],
    "MacOSX": ["-b", "-f", "-p", "{}"],
    "Linux": ["-b", "-f", "-p", "{}"],
}

CONDA_BUILD_FILE_TEMPLATE = """# This file was automatically generated by rules_conda

exports_files(['{conda}'])
"""

def _get_installer_flags(rctx, dir):
    os = get_os(rctx)
    flags = INSTALLER_FLAGS[os]

    # insert directory
    dir = rctx.path(dir)
    if os == "Windows":
        dir = windowsify(dir)
    return flags[:-1] + [flags[-1].format(dir)]

# download conda installer
def _download_conda(rctx):
    rctx.report_progress("Downloading conda installer")
    os = get_os(rctx)
    arch = get_arch(rctx)
    ext = INSTALLER_SCRIPT_EXT_MAP[os]

    if rctx.attr.installer == "miniconda":
        url = CONDA_BASE_URL + CONDA_INSTALLER_NAME_TEMPLATE.format(major = CONDA_MAJOR, minor = CONDA_MINOR, os = os, arch = arch, ext = ext)
        sha = CONDA_SHA
    elif rctx.attr.installer == "miniforge":
        url = MINIFORGE_BASE_URL + MINIFORGE_INSTALLER_NAME_TEMPLATE.format(major = MINIFORGE_MAJOR, minor = MINIFORGE_MINOR, os = os, arch = arch, ext = ext)
        sha = MINIFORGE_SHA
    else:
        fail("Installer must be either miniconda or miniforge.")

    output = "{}/install{}".format(INSTALLER_DIR, ext)

    # download from url to output
    rctx.download(
        url = url,
        output = output,
        sha256 = sha[os][arch],
        executable = True,
    )
    return output

# install conda locally
def _install_conda(rctx, installer):
    rctx.report_progress("Installing conda")
    os = get_os(rctx)
    installer_flags = _get_installer_flags(rctx, rctx.attr.conda_dir)
    args = [rctx.path(installer)] + installer_flags

    # execute installer with flags adjusted to OS
    if os == "Windows":
        # TODO: fix always returning 0
        # it seems that either miniconda installer returns 0 even on failure or the wrapper does something wrong
        # also stdout and stderr are always empty
        result = execute_waitable_windows(rctx, args, quiet = rctx.attr.quiet, environment = {"CONDA_DLL_SEARCH_MODIFICATION_ENABLE": ""}, timeout = rctx.attr.timeout)
    else:
        result = rctx.execute(args, quiet = rctx.attr.quiet, timeout = rctx.attr.timeout)

    if result.return_code:
        fail("Failure installing conda.\nstdout: {}\nstderr: {}".format(result.stdout, result.stderr))
    return "{}/condabin/conda{}".format(rctx.attr.conda_dir, CONDA_EXT_MAP[os])

def _install_mamba(rctx, executable):
    rctx.report_progress("Installing mamba")
    mamba_with_version = "mamba={}".format(rctx.attr.mamba_version)

    # `-n base` is necessary so that mamba is installed to the conda in the bazel cache.
    # If we omit `-n base`, then mamba can get installed to the user's environment i.e. ~/anaconda3 which breaks
    # the hermetic nature of the build.
    args = [rctx.path(executable), "install", "-n", "base", "-c", "conda-forge", mamba_with_version, "-y"]
    result = rctx.execute(args, quiet = rctx.attr.quiet, working_directory = rctx.attr.conda_dir, timeout = rctx.attr.timeout)
    if result.return_code:
        fail("Failure when installing mamba.\nstdout: {}\nstderr: {}".format(result.stdout, result.stderr))

# use conda to update itself
def _update_conda(rctx, executable):
    conda_with_version = "conda={}".format(rctx.attr.conda_version)
    args = [rctx.path(executable), "install", conda_with_version, "-y"]

    # update conda itself
    result = rctx.execute(args, quiet = rctx.attr.quiet, working_directory = rctx.attr.conda_dir, timeout = rctx.attr.timeout)
    if result.return_code:
        fail("Failure updating conda.\nstdout: {}\nstderr: {}".format(result.stdout, result.stderr))

# create BUILD file with exposed conda binary
def _create_conda_build_file(rctx, executable):
    conda = "{}/{}".format(rctx.attr.conda_dir, executable)
    rctx.file(
        "BUILD",
        content = CONDA_BUILD_FILE_TEMPLATE.format(conda = conda),
    )

def _load_conda_impl(rctx):
    installer = _download_conda(rctx)
    conda_executable = _install_conda(rctx, installer)
    _update_conda(rctx, conda_executable)
    if rctx.attr.install_mamba:
        _install_mamba(rctx, conda_executable)
    _create_conda_build_file(rctx, conda_executable)

load_conda_rule = repository_rule(
    _load_conda_impl,
    attrs = {
        "conda_dir": attr.string(mandatory = True),
        "conda_version": attr.string(
            mandatory = True,
            doc = "Conda version to install",
        ),
        "installer": attr.string(
            default = "miniconda",
            doc = 'Installer to use, either "miniconda" or "miniforge". Note that miniconda and miniforge have different OS/arch support.',
        ),
        "install_mamba": attr.bool(
            default = False,
            doc = "False if mamba should not be installed",
        ),
        "mamba_version": attr.string(
            mandatory = True,
            doc = "Mamba version to install",
        ),
        "quiet": attr.bool(
            default = True,
            doc = "False if conda output should be shown",
        ),
        "timeout": attr.int(
            default = EXECUTE_TIMEOUT,
            doc = "Timeout in seconds for each execute action",
        ),
    },
)
